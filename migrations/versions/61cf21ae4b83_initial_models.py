"""initial models

Revision ID: 61cf21ae4b83
Revises: 
Create Date: 2019-09-10 19:25:29.691832

"""
from alembic import op
import sqlalchemy as sa
import random


# revision identifiers, used by Alembic.
revision = '61cf21ae4b83'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    event_table = op.create_table('event',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('should_escalate', sa.String(length=25), nullable=True),
    sa.Column('country_of_authentication1', sa.String(length=25), nullable=True),
    sa.Column('number_successful_logins1', sa.String(length=25), nullable=True),
    sa.Column('number_failed_logins1', sa.String(length=25), nullable=True),
    sa.Column('source_provider1', sa.String(length=50), nullable=True),
    sa.Column('country_of_authentication2', sa.String(length=25), nullable=True),
    sa.Column('number_successful_logins2', sa.String(length=25), nullable=True),
    sa.Column('number_failed_logins2', sa.String(length=25), nullable=True),
    sa.Column('source_provider2', sa.String(length=50), nullable=True),
    sa.Column('time_between_authentications', sa.String(length=25), nullable=True),
    sa.Column('vpn_confidence', sa.String(length=5), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event_clicked',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user', sa.String(length=50), nullable=True),
    sa.Column('event_id', sa.Integer(), nullable=True),
    sa.Column('time_event_click', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event_decision',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user', sa.String(length=50), nullable=True),
    sa.Column('event_id', sa.Integer(), nullable=True),
    sa.Column('escalate', sa.String(length=15), nullable=True),
    sa.Column('confidence', sa.String(length=1), nullable=True),
    sa.Column('time_event_decision', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('prequestionnaire_answers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('user', sa.String(length=50), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=True),
    sa.Column('exp_researcher', sa.String(length=50), nullable=True),
    sa.Column('exp_admin', sa.String(length=50), nullable=True),
    sa.Column('exp_software', sa.String(length=50), nullable=True),
    sa.Column('exp_security', sa.String(length=50), nullable=True),
    sa.Column('familiarity_none', sa.Boolean(), nullable=True),
    sa.Column('familiarity_read', sa.Boolean(), nullable=True),
    sa.Column('familiarity_controlled', sa.Boolean(), nullable=True),
    sa.Column('familiarity_public', sa.Boolean(), nullable=True),
    sa.Column('familiarity_engineered', sa.Boolean(), nullable=True),
    sa.Column('subnet_mask', sa.String(length=256), nullable=True),
    sa.Column('network_address', sa.String(length=256), nullable=True),
    sa.Column('tcp_faster', sa.String(length=256), nullable=True),
    sa.Column('http_port', sa.String(length=256), nullable=True),
    sa.Column('firewall', sa.String(length=256), nullable=True),
    sa.Column('socket', sa.String(length=256), nullable=True),
    sa.Column('which_model', sa.String(length=256), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('survey_answers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('user', sa.String(length=50), nullable=True),
    sa.Column('mental', sa.Float(precision=3), nullable=True),
    sa.Column('physical', sa.Float(precision=3), nullable=True),
    sa.Column('temporal', sa.Float(precision=3), nullable=True),
    sa.Column('performance', sa.Float(precision=3), nullable=True),
    sa.Column('effort', sa.Float(precision=3), nullable=True),
    sa.Column('frustration', sa.Float(precision=3), nullable=True),
    sa.Column('useful_info', sa.Text(), nullable=True),
    sa.Column('feedback', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    training_events_table = op.create_table('training_event',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('should_escalate', sa.String(length=25), nullable=True),
    sa.Column('country_of_authentication1', sa.String(length=25), nullable=True),
    sa.Column('number_successful_logins1', sa.Integer(), nullable=True),
    sa.Column('number_failed_logins1', sa.Integer(), nullable=True),
    sa.Column('source_provider1', sa.String(length=50), nullable=True),
    sa.Column('country_of_authentication2', sa.String(length=25), nullable=True),
    sa.Column('number_successful_logins2', sa.Integer(), nullable=True),
    sa.Column('number_failed_logins2', sa.Integer(), nullable=True),
    sa.Column('source_provider2', sa.String(length=50), nullable=True),
    sa.Column('time_between_authentications', sa.Float(), nullable=True),
    sa.Column('vpn_confidence', sa.String(length=5), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('training_event_decision',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user', sa.String(length=50), nullable=True),
    sa.Column('event_id', sa.Integer(), nullable=True),
    sa.Column('escalate', sa.String(length=15), nullable=True),
    sa.Column('confidence', sa.String(length=1), nullable=True),
    sa.Column('time_event_decision', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    user_table = op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=True),
    sa.Column('group', sa.Integer(), nullable=True),
    sa.Column('time_begin', sa.DateTime(), nullable=True),
    sa.Column('time_end', sa.DateTime(), nullable=True),
    sa.Column('events', sa.String(length=256), nullable=True),
    sa.Column('questionnaire_complete', sa.Boolean(), nullable=True),
    sa.Column('training_complete', sa.Boolean(), nullable=True),
    sa.Column('experiment_complete', sa.Boolean(), nullable=True),
    sa.Column('survey_complete', sa.Boolean(), nullable=True),
    sa.Column('completion_code', sa.String(length=6), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )

    events = []
    with open("events.txt", 'r') as inFile:
        for line in inFile:
            line = line.rstrip().split('\t')
            events.append(
                {
                'should_escalate' :line[0],
                'country_of_authentication1' :line[1],
                'number_successful_logins1' :line[2],
                'number_failed_logins1' :line[3],
                'source_provider1' :line[4],
                'country_of_authentication2' :line[5],
                'number_successful_logins2' :line[6],
                'number_failed_logins2' :line[7],
                'source_provider2' :line[8],
                'time_between_authentications' :line[9],
                'vpn_confidence' :line[10]
                }
            )

    # testerEvent1
    events.append(
        {
            'should_escalate' : '1',
            'country_of_authentication1' : "For this event",
            'number_successful_logins1' : "please just",
            'number_failed_logins1' : "select 'Escalate'",
            'source_provider1' : "for your",
            'country_of_authentication2' : "decision",
            'number_successful_logins2' : "and '2'",
            'number_failed_logins2' : "for",
            'source_provider2' : "confidence",
            'time_between_authentications' : '0',
            'vpn_confidence' : '0'
        }
    )

    #testerEvent2
    events.append(
        {
            'should_escalate' : '0',
            'country_of_authentication1' : "For this event",
            'number_successful_logins1' : "please just",
            'number_failed_logins1' : 'select "Don\'t escalate"',
            'source_provider1' : "for your",
            'country_of_authentication2' : "decision",
            'number_successful_logins2' : "and '4'",
            'number_failed_logins2' : "for",
            'source_provider2' : "confidence",
            'time_between_authentications' : '0',
            'vpn_confidence' : '0'
        }
    )
    op.bulk_insert(event_table, events)

    training_events = []
    with open("trainingEvents.txt", 'r') as inFile:
        for line in inFile:
            line = line.rstrip().split('\t')
            training_events.append(
                {
                'should_escalate' :line[0],
                'country_of_authentication1' :line[1],
                'number_successful_logins1' :line[2],
                'number_failed_logins1' :line[3],
                'source_provider1' :line[4],
                'country_of_authentication2' :line[5],
                'number_successful_logins2' :line[6],
                'number_failed_logins2' :line[7],
                'source_provider2' :line[8],
                'time_between_authentications' :line[9],
                'vpn_confidence' :line[10]
                }
            )
        op.bulk_insert(training_events_table, training_events)


    random.seed(4040812785168923791782354458)
    with open("users.txt", "r") as inFile:
        escalate = [x for x in range(49, 73)]
        dont_escalate = [y for y in range(1, 49)]

        group1Events = escalate + random.sample(dont_escalate, 25)
        group2Events = random.sample(escalate, 9) + random.sample(dont_escalate, 40)
        group3Events = random.sample(escalate, 1) + dont_escalate

        users = []
        for line in inFile:
            line = line.rstrip().split('\t')
            if line[1] == "1":
                temp = group1Events
            elif line[1] == "2":
                temp = group2Events
            else:
                temp = group3Events

            random.shuffle(temp)

            assignment = str(temp).strip("[]").replace(" ", "")
            users.append(
                {
                'username' :line[0],
                'group' :line[1],
                'events' :assignment,
                'questionnaire_complete' :False,
                'training_complete' :False,
                'experiment_complete' :False,
                'survey_complete' :False,
                'completion_code' :line[2]
                }
            )
        op.bulk_insert(user_table, users)


    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user')
    op.drop_table('training_event_decision')
    op.drop_table('training_event')
    op.drop_table('survey_answers')
    op.drop_table('prequestionnaire_answers')
    op.drop_table('event_decision')
    op.drop_table('event_clicked')
    op.drop_table('event')
    # ### end Alembic commands ###
